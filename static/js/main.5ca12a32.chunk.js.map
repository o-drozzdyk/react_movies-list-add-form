{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FieldType","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","hasTitleError","setHasTitleError","setDescription","setImgUrl","hasImgUrlError","setHasImgUrlError","setImdbUrl","hasImdbUrlError","setHasImdbUrlError","setImdbId","hasImdbIdError","setHasImdbIdError","hasFormerrors","handleChange","text","field","TITLE","DESCRIPTION","IMG_URL","IMDB_URL","IMDB_ID","onClick","preventDefault","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ca12a32.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nenum FieldType {\n  TITLE = 'title',\n  DESCRIPTION = 'descripton',\n  IMG_URL = 'imgUrl',\n  IMDB_URL = 'imdbUrl',\n  IMDB_ID = 'imdbId',\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState<boolean>(true);\n\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [hasImgUrlError, setHasImgUrlError] = useState<boolean>(true);\n\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [hasImdbUrlError, setHasImdbUrlError] = useState<boolean>(true);\n\n  const [imdbId, setImdbId] = useState('');\n  const [hasImdbIdError, setHasImdbIdError] = useState<boolean>(true);\n\n  const hasFormerrors = (\n    hasTitleError || hasImgUrlError || hasImdbUrlError || hasImdbIdError\n  );\n\n  function clear() {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  }\n\n  function handleChange(text: string, field: FieldType) {\n    switch (field) {\n      case FieldType.TITLE:\n        setTitle(text);\n        setHasTitleError(false);\n        break;\n\n      case FieldType.DESCRIPTION:\n        setDescription(text);\n        break;\n\n      case FieldType.IMG_URL:\n        setImgUrl(text);\n        setHasImgUrlError(false);\n        break;\n\n      case FieldType.IMDB_URL:\n        setImdbUrl(text);\n        setHasImdbUrlError(false);\n        break;\n\n      case FieldType.IMDB_ID:\n        setImdbId(text);\n        setHasImdbIdError(false);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n\n    if (!title) {\n      setHasTitleError(true);\n    }\n\n    if (!imgUrl) {\n      setHasImgUrlError(true);\n    }\n\n    if (!imdbUrl) {\n      setHasImdbUrlError(true);\n    }\n\n    if (!imdbId) {\n      setHasImdbIdError(true);\n    }\n\n    if (!hasFormerrors) {\n      onAdd({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n      setCount(count + 1);\n      clear();\n    }\n  }\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={event => handleChange(event, FieldType.TITLE)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={event => handleChange(event, FieldType.DESCRIPTION)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={event => handleChange(event, FieldType.IMG_URL)}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={event => handleChange(event, FieldType.IMDB_URL)}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={event => handleChange(event, FieldType.IMDB_ID)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={handleSubmit}\n            disabled={hasFormerrors}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie: Movie) => setMovies([...movies, movie])} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}